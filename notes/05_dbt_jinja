-----------------------------------------------------------------------
| PART 5 - DBT JINJA                                                  |
-----------------------------------------------------------------------

- Using Jinja in dbt

    - When working through the steps in this tutorial model, we can look at the compiled SQL to see what Jinja
        compiles to.

        # Compile to SQL
        $ dbt compile

      Then, we can view the compiled SQL file in 'target/compiled/{project_name}/'.



- Write the SQL without Jinja

    - Here is the raw SQL without templating:

        select
            order_id,
            sum(case when payment_method = 'bank_transfer' then amount end) as bank_transfer_amount,
            sum(case when payment_method = 'credit_card' then amount end) as credit_card_amount,
            sum(case when payment_method = 'gift_card' then amount end) as gift_card_amount,
            sum(amount) as total_amount
        from {{ ref('raw_payments') }}
        group by 1



- Use a For Loop

    - Here, the repeated code can be replaced by a for loop:

        select
            order_id,
            {% for payment_method in ['bank_transfer', 'credit_card', 'gift_card'] %}
            sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount,
            {% endfor %}
            sum(amount) as total_amount
        from {{ ref('raw_payments') }}
        group by 1



- Set Variables at the Top of a Model

    - Setting variables at the top of a model helps with readability and enables you to reference the list
        in multiple places if required.

        {% set payment_methods = ['bank_transfer', 'credit_card', 'gift_card'] %}

        select
            order_id,
            {% for payment_method in payment_methods %}
            sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount,
            {% endfor %}
            sum(amount) as total_amount
        from {{ ref('raw_payments') }}
        group by 1



- Use loop.last to Avoid Trailing Commas

    - In the above query, our last comma is outside of the for loop, but this may not always be the case.  If
        the last iteration of our loop is our final column, we won't want a trailing comma at the end.  We
        can use an if statement along with the Jinja variable 'loop.last' to ensure we don't add an extraneous
        comma.

        {% set payment_methods = ['bank_transfer', 'credit_card', 'gift_card'] %}

        select
            order_id,
            {% for payment_method in payment_methods %}
            sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount
            {% if not loop.last %},{% endif %}
            {% endfor %}
        from {{ ref('raw_payments') }}
        group by 1


    - An alternative way to write this is:

        {{ "," if not loop.last }}



- Controlling Whitespace

    - If we look at the compiled code in the 'target/compiled' folder, we'll see that the code has a lot of
        whitespace.  We can use whitespace control to tidy this up.  It is recommended to prioritize readability
        of the model code over readability of the compiled code.

        {%- set payment_methods = ['bank_transfer', 'credit_card', 'gift_card'] -%}

        select
            order_id,
            {%- for payment_method in payment_methods %}
            sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount
            {%- if not loop.last %},{% endif -%}
            {% endfor %}
        from {{ ref('raw_payments') }}
        group by 1



- Using a Macro to Return Payment Methods

    - First, we'll create a new macro:

        # /macros/get_payment_methods.sql
        -----------------------------------
        {% macro get_payment_methods() %}
        {{ return(['bank_transfer', 'credit_card', 'gift_card']) }}
        {% endfor %}

      Note that we need a 'return' statement to return a list.  Otherwise, the macro would return a string.


    - We we can use the macro:

        {%- set payment_methods = get_payment_methods() -%}

        select
            order_id,
            {%- for payment_method in payment_methods %}
            sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount
            {%- if not loop.last %},{% endif -%}
            {% endfor %}
        from {{ ref('raw_payments') }}
        group by 1      



- Dynamically Retrieving the List of Payment Methods

    - 'Statements' provide a way to run a query and return the results to your Jinja context.  The easiest way
        to use a statement is through the 'run_query' macro.


    - Here, we run a query, and log the results to the command line using the 'log' function.

        {% macro get_payment_methods() %}

        {% set payment_methods_query %}
        select distinct
        payment_method
        from {{ ref('raw_payments') }}
        order by 1
        {% endset %}

        {% set results = run_query(payment_methods_query) %}

        {{ log(results, info=True) }}

        {{ return([]) }}

        {% endmacro %}



- Write Modular Macros

    - One macro can call another macro, allowing you to break up logic for reusability.

        {% macro get_column_values(column_name, relation) %}
        ...
        {% endmacro %}

        {% macro get_payment_methods() %}
        {{ return(get_column_values('payment_method', ref('raw_payments'))) }}
        {% endmacro %}



- Use a Macro from a Package

    - Macros can be shared across projects.  A number of useful dbt macros have already been written in the 
        'dbt-utils' package.  For example, the 'get_column_values' macro from dbt-utils can be used.

        {%- set payment_methods = dbt_utils.get_column_values(
            table=ref('raw_payments'),
            column='payment_method'
        ) -%}


    - To install dbt-utils, add it to your 'packages.yml' file in the project root.

        # packages.yml
        -----------------
        packages:
            - package: dbt-labs/dbt_utils
              version: 1.1.0


    - Now to add packages defined in that file:

        $ dbt deps



- The 'ref' function

    - The most important function in dbt is 'ref()'.  It is how you reference one model within another, and
        allows you to stack models on top of one another.

        model_a.sql
        ----------------
        select *
        from public.raw_data

        model_b.sql
        ----------------
        select *
        from {{ ref('model_a') }}



- The 'this' function

    - 'this' is the database representation of the current model.  Is is useful when defining a WHERE statement
        within incremental models or using pre or post hooks.


    - 'this' is a 'Relation', so properties such as {{ this.schema }} and {{ this.database }} compile as
        expected.  It can be thought of as equivalent to ref('<the_current_model>'), and is a neat way to avoid
        circular dependencies.


    - For an example of configuring an incremental model:

        {{ config(materialized='incremental') }}

        select
            *,
            my_slow_function(my_column)

        from raw_app_data.events

        {% if is_incremental() %}
          where event_time > (select max(event_time) from {{ this }})
        {% endif %}