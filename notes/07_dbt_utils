-----------------------------------------------------------------------
| PART 7 - DBT-UTILS                                                  |
-----------------------------------------------------------------------

- star

    - The 'star' macro generates a comma-separated list of all fields that exist in the 'from' relation,
        excluding any fields listed in the 'except' argument.

        select {{ dbt_utils.star(ref('my_model')) }}
        from {{ ref('my_model') }}

        select {{ dbt_utils.star(from=ref('my_model'), except=["exclude_field_1", "exclude_field_2"]) }}
        from {{ ref('my_model') }}



- generate_surrogate_key

    - This macro implements a cross-database way to generate a hashed surrogate key using the fields specified.

        {{ dbt_utils.generate_surrogate_key(['field_a', 'field_b'[,...]]) }}



- get_filtered_columns_in_relation

    - This macro returns an iterable Jinja list of columns for a given relation.

        -- Returns a list of the columns from a relation, so you can then iterate in a for loop
       {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=ref('your_model'), except=["field_1"]) %}

       {% for column_name in column_names %}
           max({{ column_name }}) ... as max_'{{ column_name }}',
       {% endfor %}