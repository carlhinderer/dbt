-----------------------------------------------------------------------
| PART 1 - INTRODUCTION                                               |
-----------------------------------------------------------------------

- What is dbt?

    - dbt is a transformation workflow that can be used to modularize and centralize your analytics code
        while providing your team with guardrails typically found in software engineering workflows.

    - dbt helps you avoid boilerplate DML and DDL by managing transactions, dropping tables, and managing
        schema changes.  It helps build reusable data models that can be referenced in subsequent work.

    - You can change a model in one place, and that change will propogate to all its dependencies.

    - Mature source control processes like branching, pull requests, and code reviews can be used.

    - Data quality tests can be written on the underlying data.



- dbt Products

    - dbt cloud is a hosted version of dbt with a web-based UI.  It also has extra features, such as
        metadata, an in-app job scheduler, and an IDE.

    - dbt Core is an open-source tool that enables data teams to transform using analytics engineering
        best practices.



- dbt Features

    - As a dbt user, your main focus is on writing models (ie select queries) that reflect core business
        logic.  There is no need to write boilerplate code to create tables and views, or to define the
        order of execution of your models.  dbt handles turning those models into objects in your warehouse
        for you.

    - For each model you create, you can easily configure a 'materialization', which represents the build
        strategy for your select query.

    - SQL files can contain Jinja templating.  This provides a way to use control structures in your
        queries, like if statements and for loops.  This also allows repeated SQL to be shared through
        macros.

    - dbt provides a mechanism to implement transformations in stages through the 'ref function'.  Rather
        than selecting from existing tables, you can select from another model.

    - There is a mechanism for writing, version controlling, and sharing documentation for your models.
        You can write descriptions (in either plain text or markdown) for each model and field.

    - You can write tests that make assertions about the data.

    - dbt ships with a package manager, which allows for both public and private repositories to be used.

    - Seed files can be saved as a CSV file in the project and get automatically loaded into your DW
        using the 'seed' command.

    - There is a mechanism to snapshot raw data for a point in time using 'snapshots'.